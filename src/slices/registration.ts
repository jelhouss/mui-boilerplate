/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { AxiosError, AxiosResponse } from "axios"

import registrationClient from "../services/RegistrationService"
import { RegistrationPayload, RegistrationResponse } from "../types/registration"
import { User } from "../types/user"

export interface RegistrationState {
  user: User | null
  status: "idle" | "loading" | "succeeded" | "failed"
  errorStatus: number | null
}

const initialState: RegistrationState = {
  user: null,
  status: "idle",
  errorStatus: null
}

export const register = createAsyncThunk(
  "registration/register",
  async (registrationPayload: RegistrationPayload, { rejectWithValue }) => {
    try {
      return await registrationClient.register(registrationPayload)
    } catch (error) {
      return rejectWithValue(((error as AxiosError).response as AxiosResponse).status)
    }
  }
)

export const registrationSlice = createSlice({
  name: "registration",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearState(state) {
      state.errorStatus = null
      state.status = "idle"
      state.user = null
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // sign in
    builder
      .addCase(register.pending, (state) => {
        state.status = "loading"
      })
      .addCase(register.fulfilled, (state, action) => {
        const { user } = action.payload as RegistrationResponse

        // set local state
        state.user = user
        state.status = "succeeded"
      })
      .addCase(register.rejected, (state, action) => {
        state.status = "failed"
        state.errorStatus = action.payload as number
      })
  }
})

export const { clearState } = registrationSlice.actions

export default registrationSlice.reducer
