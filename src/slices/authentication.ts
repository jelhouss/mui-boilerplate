/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { AxiosError, AxiosResponse } from "axios"

import authenticationClient from "../services/AuthenticationService"
import {
  AuthenticationPayload,
  AuthenticationResponse,
  RefreshAuthenticationResponse
} from "../types/authentication"
import { User } from "../types/user"

export interface AuthenticationState {
  user: User | null
  status: "idle" | "loading" | "succeeded" | "failed"
  errorStatus: number | null
}

const initialState: AuthenticationState = {
  user: null,
  status: "idle",
  errorStatus: null
}

export const TOKEN = "accessToken"

export const signIn = createAsyncThunk(
  "authentication/signIn",
  async (authenticationPayload: AuthenticationPayload, { rejectWithValue }) => {
    try {
      return await authenticationClient.signIn(authenticationPayload)
    } catch (error) {
      return rejectWithValue(((error as AxiosError).response as AxiosResponse).status)
    }
  }
)

export const signOut = createAsyncThunk("authentication/signOut", () =>
  authenticationClient.signOut()
)

export const refresh = createAsyncThunk(
  "authentication/refresh",
  async (_, { rejectWithValue }) => {
    try {
      return await authenticationClient.refresh()
    } catch (error) {
      return rejectWithValue(((error as AxiosError).response as AxiosResponse).status)
    }
  }
)

export const authenticationSlice = createSlice({
  name: "authentication",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearState(state) {
      state.errorStatus = null
      state.status = "idle"
      state.user = null
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // sign in
    builder
      .addCase(signIn.pending, (state) => {
        state.status = "loading"
      })
      .addCase(signIn.fulfilled, (state, action) => {
        const { user, token } = action.payload as AuthenticationResponse

        // set local storage
        localStorage.setItem(TOKEN, token)

        // set local state
        state.user = user
        state.status = "succeeded"
      })
      .addCase(signIn.rejected, (state, action) => {
        state.status = "failed"
        state.errorStatus = action.payload as number
      })

    // sign out
    builder
      .addCase(signOut.pending, (state) => {
        state.status = "loading"
      })
      .addCase(signOut.fulfilled, (state) => {
        // clear local state
        state.user = null
        state.status = "succeeded"

        // clear local storage
        localStorage.removeItem(TOKEN)
      })

    // refresh
    builder
      .addCase(refresh.pending, (state) => {
        state.status = "loading"
      })
      .addCase(refresh.fulfilled, (state, action) => {
        const { user } = action.payload as RefreshAuthenticationResponse

        // set local state
        state.user = user
        state.status = "succeeded"
      })
      .addCase(refresh.rejected, (state, action) => {
        // clear local state
        state.status = "failed"
        state.errorStatus = action.payload as number

        // clear runtime token (for whatever reason)
        authenticationClient.setAccessToken(null)

        // clear local storage
        localStorage.removeItem(TOKEN)
      })
  }
})

export const { clearState } = authenticationSlice.actions

export default authenticationSlice.reducer
